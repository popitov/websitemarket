// worker.js
//-----------------------------------------------------
//  –ò–º–ø–æ—Ä—Ç—ã –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
//-----------------------------------------------------
import { html, CSS, escape }      from './utils.js';
import { getGoods }               from './goods.js';
import { createInvoice, isPaid }  from './payments.js';

//-----------------------------------------------------
//  –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–æ–∫–µ–Ω–∞ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
//-----------------------------------------------------
const RAW_KEY   = "0123456789abcdef0123456789abcdef";
const LINKS_KEY = "bots-json";

//-----------------------------------------------------
//  b64url + AES-GCM —Ç–æ–∫–µ–Ω (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
//-----------------------------------------------------
const b64url = u8 => btoa(String.fromCharCode(...u8))
  .replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"");

const KEY_PROMISE = crypto.subtle.importKey(
  "raw", new TextEncoder().encode(RAW_KEY),
  { name:"AES-GCM" }, false, ["encrypt"]
);

async function exportToken(req){
  const ip = (req.headers.get("cf-connecting-ip")||"0.0.0.0")
      .match(/^(\d{1,3}\.){3}\d{1,3}$/) ? RegExp.lastMatch : "0.0.0.0";
  const cc = (req.headers.get("cf-ipcountry")||"--").slice(0,2);
  const ts = Math.floor(Date.now()/1000);

  const p = new Uint8Array(16);
  ip.split(".").forEach((n,i)=>p[i]=+n);
  p[4]=cc.charCodeAt(0)||0; p[5]=cc.charCodeAt(1)||0;
  new DataView(p.buffer).setUint32(6, ts);

  const iv  = crypto.getRandomValues(new Uint8Array(12));
  const key = await KEY_PROMISE;
  const ct  = new Uint8Array(await crypto.subtle.encrypt({name:"AES-GCM",iv},key,p));
  return b64url(new Uint8Array([...iv, ...ct]));
}

//-----------------------------------------------------
//  –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
//-----------------------------------------------------
export default {
  async fetch(req, env) {
    const { pathname } = new URL(req.url);

    // 0 ‚Äî –∫—ç—à–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ—ã
    const GOODS = await getGoods(env);

    // 1 ‚Äî –ö–æ—Ä–µ–Ω—å: –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    if (pathname === '/' || pathname === '') {
      const raw   = await env.LINKS_KV.get(LINKS_KEY);
      const links = raw ? JSON.parse(raw) : [];
      if (!links.length) return new Response("No links",{status:503});

      const token  = await exportToken(req);
      const botUrl = links[0] + (links[0].includes('?')?'&':'?') + 'start=' + token;

      return html(`
        <style>${CSS}</style>
        <div style="display:flex;justify-content:center;align-items:center;height:100vh">
          <div class="card" style="text-align:center">
            <h2>‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø</h2>
            <a class="btn primary" href="${botUrl}">üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç</a>
            <a class="btn" href="/shop">üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–¥–µ—Å—å</a>
          </div>
        </div>`);
    }

    // 2 ‚Äî /shop: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    if (pathname === '/shop') {
      const items = GOODS.map(g => `
        <div class="card">
          <h3>${escape(g.name)}</h3>
          <p>${escape(g.descr)}</p>
          <b>${g.price}&nbsp;‚ÇΩ</b><br>
          <form action="/buy" method="post">
            <input type="hidden" name="tid" value="${g.id}">
            <button>–ö—É–ø–∏—Ç—å</button>
          </form>
        </div>`).join('');
      return html(`<h1>–ú–∞–≥–∞–∑–∏–Ω</h1><div class="grid">${items}</div><style>${CSS}</style>`);
    }

    // 3 ‚Äî /buy: –≤—ã–¥–∞—ë–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
    if (pathname === '/buy' && req.method === 'POST') {
      const fd  = await req.formData();
      const tid = +fd.get('tid');
      const good = GOODS.find(g => g.id === tid);
      if (!good) return new Response('Bad ID', {status:400});

      const invoice = await createInvoice(good);   // –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
      return html(`
        <h2>–û–ø–ª–∞—Ç–∞ ‚Äî ${escape(good.name)}</h2>
        <p>–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>${good.price} ‚ÇΩ</b> –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</p>
        ${invoice.html}
        <form action="/check" method="post">
          <input type="hidden" name="tid" value="${tid}">
          <input type="hidden" name="inv" value="${invoice.id}">
          <button>‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª</button>
        </form>
        <form action="/shop" method="get" style="margin-top:8px">
          <button>‚ùå –û—Ç–º–µ–Ω–∞</button>
        </form>
        <style>${CSS}</style>
      `);
    }

    // 4 ‚Äî /check: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if (pathname === '/check' && req.method === 'POST') {
      const fd  = await req.formData();
      const tid = +fd.get('tid'), inv = fd.get('inv');
      const good = GOODS.find(g => g.id === tid);
      if (!good) return new Response('bad', {status:400});

      const paid = await isPaid(inv);              // —Å–µ–π—á–∞—Å –≤—Å–µ–≥–¥–∞ true
      if (!paid)
        return html("<p>–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.</p><a href=\"/shop\">‚Üê –ù–∞–∑–∞–¥</a>");

      return html(`
        <h2>‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</h2>
        <pre>${escape(good.payload)}</pre>
        <a href="/shop">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è</a>
        <style>${CSS}</style>
      `);
    }

    // 404
    return new Response('Not found', {status:404});
  }
};
